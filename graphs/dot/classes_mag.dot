digraph "classes" {
    charset = "utf-8"
    rankdir = BT
    "0" [label = "{Chromosome|_distances\lchromosome_size\lfitness : float\lgenes : ndarray\l|__init__(chromosome_size, distances)\lgenerate_random_chromosome(numpy_random)\lcalculate_fitness()\lmutate(numpy_random)\l}", shape = "record"];
    "1" [label = "{DMChromosome|dm_priority_list : ndarray\l|__init__(chromosome_size, distances, dm_priority_list)\lcalculate_fitness()\l}", shape = "record"];
    "2" [label = "{Population|_distances\l_population_size\lchromosomes : ndarray\l|__init__(population_size, chromosome_size, distances)\l_dmx_crossover(crossover_prob, mut_prob, numpy_random)\l_roulette_selection(numpy_random)\lcalculate_fitness()\lcrossover(crossover_prob, mut_prob, numpy_random)\lfind_best_chromosome()\lgenerate_random_population(numpy_random)\lmutate(prob, numpy_random)\lselection(numpy_random)\l}", shape = "record"];
    "3" [label = "{DMPopulation|chromosomes : ndarray(DMChromosome)\ldm_priority_list : ndarray\l|__init__(population_size, chromosome_size, distances, dm_priority_list)\l_dmx_crossover(crossover_prob, mut_prob, numpy_random)\l_roulette_selection(numpy_random)\l}", shape = "record"];
    "4" [label = "{ClusterSolver|_BASE_DIR\l_P : int\l_Pc : float\l_Pm : float\l_Pmb : float\l_distances\l_k : NoneType\l_ng_arr : ndarray\l_numpy_random : NoneType\l_dm_size : int\l_dm_ng\l_dm_priority_list : ndarray\l_dm_threshold : int\l_dm_min_pattern_length : int\l_DM_MAX_PATTERNS_SEARCH\l_DM_MAX_PRIORITY_LIST_SIZE\l|__init__(distances, Z, P, ng_arr, Pc, Pm, Pmb, k, dm_size, dm_ng)\lsolve_cluster_core_data_mining()\l_make_multistart_genetic()\lsolve()\l_solve(population, cur_best_chromosome, np_rand)\l_init(population, chromosome, numpy_rand)\l_get_new_best_chromosome(current_best_chromosome, population)\l}", shape = "record"];
    "5" [label = "{Launcher|_launch_entries\l_vrptw_launch_entry\l_plot_stats\l_plot_solutions\l_solve_cluster\l_solve_tsptw\l_vrptw_path_holder\l_plotter : Plot\lplot_stats_dict\l|__init__(launch_entries, plot_stats, plot_solutions, solve_cluster, solve_tsptw)\llaunch()\l_make_solving()\l_make_plot_stats()\l_make_plot_solutions()\l}", shape = "record"];
    "6" [label = "{Plot|_dpi_standart : int\l_figsize_standart : tuple\l_linewidth_standart : float\l_width : float\ldepth : float\l|__init__()\l_plot_route(spatial_data, color, route_type, axes)\lplot_clusters_routes(points_with_ind, tws, route_type, text, output_dir)\lplot_stats(stats_df, bks_stats_df, data_column_name, xlabel, ylabel, output_dir)\lplot_stats_bks(stats_df, bks_stats_df, data_column_name, xlabel, ylabel, output_dir)\lplot_stats_bks_hist(stats_df, bks_stats_df, data_column_name, xlabel, ylabel, output_dir)\l_plot_tws(spatial_data, tws, max_tw, colors, axes)\l_plot(x, y, c, label, xlabel, ylabel)\l_plot_on_axes(axes, x, y, c, label, xlabel, ylabel, title)\l}", shape = "record"];
    "7" [label = "{Statistics|_vrptw_launch_entry\l_vrptw_path_holder\l_cluster_launch_entry_arr\l_tsptw_launch_entry_arr\l|__init__(vrptw_launch_entry, vrptw_path_holder)\lcollect_all_stats()\l_fill_time_stats(launch_entry, time_cluster_arr, time_tsptw_arr, time_common_arr)\l_fill_evaluation_data(launch_entry, vehicle_number, i, evaluation_arr, wait_time_arr, late_time_arr)\lcollect_bks_stats()\l_parse_bks_routes()\l}", shape = "record"];
    "8" [label = "{VRPTWSolver|_vrptw_launch_entry\l_vrptw_path_holder\l_cluster_launch_entry_arr\l_tsptw_launch_entry_arr\l_plotter|__init__(vrptw_launch_entry, vrptw_path_holder)\lsolve(solve_cluster, solve_tsptw)\l_solve_in_cluster_mode(solve_cluster)\l_solve_cluster_parallel(full_result, lambda_to_solve)\l_solve_cluster_sequential(full_result: ndarray, lambda_to_solve)\l_solve_cluster_base(cluster_launch_entry: ClusterLaunchEntry, lambda_to_solve)\l_collect_cluster_result( dataset_reduced, tws_reduced, result, init_dataset, output_dir, tws_all, service_time_all, spatiotemporal)\lcalculate_spatiotemporal(cluster_launch_entry, init_dataset, service_time_all, tws_all)\lread_input_for_cluster_mode(path)\lread_input_for_plot_solutions(vehicle_number, path_cluster, path_tsptw)\l_evaluate_solution(tsptw_results, output_dir)\l}", shape = "record"];
    "9" [label = "{FPNode|item_name : str\lcount: int\lparent : FPNode\llink : FPNode\lchildren : ndarray\l|__init__(item_name, frequenct, parent_node)\l}", shape = "record"];
    "10" [label = "{FPTree|__init__()\lconstruct_tree()\lupdate_header_table()\lupdate_tree\lascend_fptree()\lfind_prefix_path()\lmine_tree()\lpowerset()\lget_support()\lmine_sub_trees()\lassociation_rule()\lget_frequency_from_list()\lfpgrowth()\l}", shape = "record"];

    "6" -> "5" [arrowhead = "diamond", arrowtail = "none", fontcolor = "green", label = "_plotter", style = "solid"];
    "5" -> "7" [arrowhead = "open", arrowtail = "none", fontcolor = "green", label = "statistics", style = "solid"];
    "5" -> "8" [arrowhead = "open", arrowtail = "none", fontcolor = "green", label = "vrptw_solver", style = "solid"];

    "8" -> "4" [arrowhead = "open", arrowtail = "none", fontcolor = "green", label = "cluster_solver", style = "solid"];
    "4" -> "1" [arrowhead = "open", arrowtail = "none", fontcolor = "green", label = "dmchromosomes", style = "solid"];
    "4" -> "3" [arrowhead = "open", arrowtail = "none", fontcolor = "green", label = "dmpopulatioin", style = "solid"];

    "1" -> "0" [arrowhead = "onormal", arrowtail = "none", fontcolor = "green", label = "inherits", style = "solid"];
    "3" -> "2" [arrowhead = "onormal", arrowtail = "none", fontcolor = "green", label = "inherits", style = "solid"];

    "4" -> "10" [arrowhead = "open", arrowtail = "none", fontcolor = "green", label = "fpgrowth", style = "solid"];
    "10" -> "9" [arrowhead = "open", arrowtail = "none", fontcolor = "green", label = "uses", style = "solid"];
}
